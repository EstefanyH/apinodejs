import type { Options } from 'serverless';
import type { Logging } from 'serverless/classes/Plugin';
import type { AutoSwaggerCustomConfig, CustomHttpApiEvent, CustomHttpEvent, CustomServerless, ServerlessCommands, ServerlessHooks } from './types/serverless-plugin.types';
import type { Swagger } from './types/swagger.types';
export default class ServerlessAutoSwagger {
    serverless: CustomServerless;
    autoSwaggerCustomConfig: AutoSwaggerCustomConfig;
    swagger: Swagger;
    options: Options;
    log: Logging['log'];
    commands: ServerlessCommands;
    hooks: ServerlessHooks;
    constructor(serverless: CustomServerless, options: Options, io?: Logging);
    private getCustomLifecycleHooks;
    private getCustomCommands;
    private setupLogging;
    enrichServerlessSchema: () => void;
    preDeploy: () => Promise<void>;
    generateSwagger: () => Promise<void>;
    /** Updates this.swagger with serverless custom.autoswagger overrides */
    gatherSwaggerOverrides: () => void;
    /** Updates this.swagger with swagger file overrides */
    gatherSwaggerFiles: (swaggerFiles: string[]) => void;
    gatherTypes: () => Promise<void>;
    generateSecurity: () => void;
    private prepareResourceFolder;
    private writeSwaggerFile;
    private isPythonRuntime;
    private writePythonSwaggerFile;
    private writeJSSwaggerFile;
    addEndpointsAndLambda: () => void;
    addSwaggerPath: (functionName: string, http: CustomHttpEvent | CustomHttpApiEvent) => void;
    generatePaths: () => void;
}
